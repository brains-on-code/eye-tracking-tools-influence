ID;Title;DOI;citation(in APA);year;venue;tool;manual analysis;custom tool description;tool justification/consequence;eyetracker;configuration eyetracker;study task;#participants;demographics;#items per participant;item type;item language;item scrolling;replication package;codes justification;codes consequence
S1;On the Suitability of Real-Time Assessment of Programming Proficiency using Gaze Properties;http://dx.doi.org/10.1145/3205873.3210702;Liang, C., Karolus, J., Kosch, T., & Schmidt, A. (2018). On the Suitability of Real-Time Assessment of Programming Proficiency using Gaze Properties. PerDis ’18: Proceedings of the 7th ACM International Symposium on Pervasive Displays. https://doi.org/10.1145/3205873.3210702;2018;conference;not named;/;/;/;/;/;program comprehension;14;students;12;code snippet;Java;no;no;;
S2;Atoms of Confusion: The Eyes Do Not Lie;http://dx.doi.org/10.1145/3422392.3422437;Oliveira, B., Ribeiro, M., Da Costa, J. a. S., Gheyi, R., Amaral, G., De Mello, R., Oliveira, A., Garcia, A., Bonifácio, R., & Fonseca, B. (2020). Atoms of Confusion. SBES ’20: Proceedings of the XXXIV Brazilian Symposium on Software Engineering. https://doi.org/10.1145/3422392.3422437;2020;conference;custom;;analyzed eye gaze perspective with heatmaps, number of gaze transitions,calculated focus of attention per second from median coordinates, transition of eyes from one focus to another is gaze transition, only considered transitions that occurs by at least 1/3 of the participants;/;/;80 sample points/second;program comprehension;30;9 undergraduates, 17 masters, 4 PhD;6;code snippet;C, C++;no;https://github.com/easy-software-ufal/Atoms-of-Confusion-Experiment-Data/tree/master/Raw%20Data%20Captured;;
S3;Applying Eye Tracking to Identify Students' Use of Learning Strategies in Understanding Program Code;http://dx.doi.org/10.1145/3345120.3345144;Cheng, G., Poon, L. K. M., Lau, W. W. F., & Zhou, R. C. (2019). Applying Eye Tracking to Identify Students’ Use of Learning Strategies in Understanding Program Code. ICEMT ’19: Proceedings of the 3rd International Conference on Education and Multimedia Technology. https://doi.org/10.1145/3345120.3345144;2019;conference;not named;;number of fixations and revisits analyzed without named;;GazePoint GP3 HD;/;program comprehension;36;students, no/very little programming experience;1;code snippet;Java;no;no;;
S4;Toward an Objective Measure of Developers’ Cognitive Activities;http://dx.doi.org/10.1145/3434643;Sharafi, Z., Huang, Y., Leach, K., & Weimer, W. (2021). Toward an objective measure of developers’ cognitive activities. ACM Transactions on Software Engineering and Methodology, 30(3), 1–40. https://doi.org/10.1145/3434643;2021;journal;Ogama;;/;/;Avotec RE-5701;1920*1080 pixel, 24 pixel font size, received stimuli via mirror;program comprehension;29;23 undergraduate, 7 graduate;;code snippet;C;no;https://web.eecs.umich.edu/~weimerw/fmri-resources/2018-Eye-Tracking-Data.zip;;
S5;Analyzing the influence of block highlighting on beginning programmers' reading behavior using eye tracking;http://dx.doi.org/10.1145/3442481.3442505;Talsma, R., Barendsen, E., & Smetsers, S. (2020). Analyzing the influence of block highlighting on beginning programmers’ reading behavior using eye tracking. CSERC ’20: Proceedings of the 9th Computer Science Education Research Conference. https://doi.org/10.1145/3442481.3442505;2020;conference;Tobii Studio 2.3.2;;/;"Using Tobii Studio’s built in
feature of visualizing both movements and fixations atop of the
stimulus material, we could stimulate participants’ recollection.
While showing the eye movements and fixations to participants,
we asked them to reflect on their thought process and reading behaviour, triggered by the question “Can you walk us through your
thought process when reading this code on the basis of your eye
movements?”";Tobii t60 XL;"1920*1200 pixel, 24"" screen, 13 pixel font size";program comprehension;7;beginning programmers;2;code snippet;Java;no;no;stimulate recollection, visualization of movements/fixations;
S6;Variability through the Eyes of the Programmer;http://dx.doi.org/10.1109/ICPC.2017.34;Melo, J., Narcizo, F. B., Hansen, D. W., Brabrand, C., & Wąsowski, A. (2017). Variability through the Eyes of the Programmer. 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC). https://doi.org/10.1109/icpc.2017.34;2017;conference;Ogama;;/;/;Tobii EyeX;/;debugging;20;7 undergraduate, 1 master, 7 PhD, 5 post-doc;2;code snippet;Java;no;no;;
S7;Biases and differences in code review using medical imaging and eye-tracking: genders, humans, and machines;http://dx.doi.org/10.1145/3368089.3409681;Huang, Y., Leach, K., Sharafi, Z., McKay, N., Santander, T., & Weimer, W. (2020). Biases and differences in code review using medical imaging and eye-tracking: genders, humans, and machines. ESEC/FSE 2020: Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. https://doi.org/10.1145/3368089.3409681;2020;conference;Ogama;;/;"""We use Ogama
to manually identify horizontal and vertical offsets by replaying
the eye gaze data""";Avotec RE-5701;1920*1080 pixel, 36 pixel font size, received stimuli via mirror;debugging;37;26 undergraduate, 11 graduate;60;code snippet;C, C++;no;no;manual analysis;
S8;Design of an Executable Specification Language Using Eye Tracking;http://dx.doi.org/10.1109/EMIP.2019.00014;Simhandl, G., Paulweber, P., & Zdun, U. (2019). Design of an Executable Specification Language Using Eye Tracking. 2019 IEEE/ACM 6th International Workshop on Eye Movements in Programming (EMIP). https://doi.org/10.1109/emip.2019.00014;2019;conference;Pupil Labs capture;;scan path analysis;/;monocular eye-tracking headset from Pupil Labs3, equipped with a 200Hz eye camera and a world camera with a resolution of 1280x720 pixels;;program comprehension;9;students;4;code snippet;CASM;no;no;;
S9;Code Reviews in C++: Preliminary Results from an Eye Tracking Study;http://dx.doi.org/10.1145/3379156.3391980;Hauser, F., Schreistter, S., Reuter, R., Mottok, J., Gruber, H., Holmqvist, K., & Schorr, N. (2020). Code reviews in C++. ACM Symposium on Eye Tracking Research and Applications. https://doi.org/10.1145/3379156.3391980;2020;conference;not named;;/;/;Tobii Spectrum 600;/;debugging;35;21 novices, 14 advanced/expert;8;code snippet;C++;no;no;;
S10;Understanding and Improving Secure Coding Behavior with Eye Tracking Methodologies;http://dx.doi.org/10.1145/3374135.3385293;Davis, D. K., & Zhu, F. (2020). Understanding and Improving Secure Coding Behavior with Eye Tracking Methodologies. ACM SE ’20: Proceedings of the 2020 ACM Southeast Conference. https://doi.org/10.1145/3374135.3385293;2020;conference;Tobii Studio (fixations, saccades);;/;"""There is a frequently
recommended filtering technique called the I-VT Filter. We use
this well-established procedure for initial eye tracking data
processing "" "" The I-VT filter has additional settings such as the
ability to discard very short fixations, merge adjacent fixations
and select if both eyes are to be averaged. Upon examining the
design and parameters of each of the three filters that Tobii
Studio offers, we utilized the default settings for the parameters
with the velocity threshold set to 30 degrees per second""";Tobii X2-60;1080p, 144 Hz, 50-70 cm distance;program comprehension;29;students;4;code snippet;PHP;no;no;well-established, additional settings;
S11;Classification of strategies for solving programming problems using AoI sequence analysis;http://dx.doi.org/10.1145/3314111.3319825;Obaidellah, U., Raschke, M., & Blascheck, T. (2019). Classification of strategies for solving programming problems using AoI sequence analysis. ETRA ’19: Proceedings of the 11th ACM Symposium on Eye Tracking Research & Applications. https://doi.org/10.1145/3314111.3319825;2019;conference;dispersion algorithm [Salvucci and Goldberg 2000, maximum dispersion = 18, minimum rows = 5] (fixations), Blickshift Analytics (fixation to AoI);;/;/;GP3 Gazepoint;"1920*1080 pixel, 23"" screen";comprehension (non-code);36;undergraduates;9;questions;/;no;https://dl.acm.org/action/downloadSupplement?doi=10.1145%2F3314111.3319825&file=a15-obaidellah.zip;;
S12;Indentation: Simply a Matter of Style or Support for Program Comprehension?;http://dx.doi.org/10.1109/ICPC.2019.00033;Bauer, J. D. C., Siegmund, J., Peitek, N., Hofmeister, J. C., & Apel, S. (2019). Indentation: Simply a Matter of Style or Support for Program Comprehension? 2019 IEEE/ACM 27th International Conference on Program Comprehension (ICPC). https://doi.org/10.1109/icpc.2019.00033;2019;conference;Tobii Eye Tracking Core 2.9.0;;;/;Tobii EyeX;"1920*1200 pixel, 24"" screen, 60Hz, 50 cm distance";program comprehension;22;15 students, 4 department, 3 employee;4;code snippet;Java;no;https://github.com/brains-on-code/indentation/;;
S13;Attention patterns for code animations: using eye trackers to evaluate dynamic code presentation techniques;http://dx.doi.org/10.1145/3191697.3214338;Spinelli, L., Pandey, M., & Oney, S. (2018). Attention patterns for code animations: using eye trackers to evaluate dynamic code presentation techniques. Programming ’18: Companion Proceedings of the 2nd International Conference on the Art, Science, and Engineering of Programming. https://doi.org/10.1145/3191697.3214338;2018;conference;not named;/;/;/;/;/;debugging;16;novices;3;code snippet;Python;no;no;;
S14;What Drives the Reading Order of Programmers?: An Eye Tracking Study;http://dx.doi.org/10.1145/3387904.3389279;Peitek, N., Siegmund, J., & Apel, S. (2020). What Drives the Reading Order of Programmers? ICPC ’20: Proceedings of the 28th International Conference on Program Comprehension. https://doi.org/10.1145/3387904.3389279;2020;conference;/;Savitzky-Golay filter (window length of 5, polynomial order of 3), velocity-based algorithm (fixations, saccades);/;"""Several of our used eye-movement measures are based on matching
a fixation to a source code line. This leaves some room for interpretation, as participants may use peripheral vision and do not
need to focus exactly on a source code line""";Tobii EyeX;1920*1200,1920*1080,1680*1050 pixel;program comprehension;29;12 novice, 19 intermediate;10;code snippet;Java;no;https://github.com/brains-on-code/eyetracking-linearity-replication/;;inaccuracy
S15;Developer Reading Behavior While Summarizing Java Methods: Size and Context Matters;http://dx.doi.org/10.1109/ICSE.2019.00052;Abid, N. J., Sharif, B., Dragan, N., Alrasheed, H., & Maletic, J. I. (2019). Developer Reading Behavior While Summarizing Java Methods: Size and Context Matters. 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE). https://doi.org/10.1109/icse.2019.00052;2019;conference;iTrace (fixations, saccades);/;/;"""The first limitation is that the maximum length of
methods included in their study is only 22 lines. That is, a
single fixed window of source code that must appear all at
once on the screen with no support for scrolling. The second
limitation is that methods are presented in complete isolation
with no ability to look at other methods or related code.
We overcome these two limitations by utilizing a new eyetracking infrastructure call iTrace [18, 19] that is developed
specifically for conducting eye-tracking studies within a software Integrated Development Environment""";Tobii X60;/;program comprehension;18;13 novice, 5 expert;15;code snippet;Java;yes;https://zenodo.org/record/2550768;scrolling, interaction with other elements;
S16;Eye movements in code review;http://dx.doi.org/10.1145/3216723.3216727;Begel, A., & Vrzakova, H. (2018). Eye movements in code review. EMIP ’18: Proceedings of the Workshop on Eye Movements in Programming. https://doi.org/10.1145/3216723.3216727;2018;conference;custom tool;;"extension for CodeFlow (""We recorded window
positions, window sizes, scroll positions, the mouse position in
screen and window coordinates, the filename and path of the code under review, and any review comments that were written."" ""Our extension translates the gaze position into an editor character location
to identify the code element at which the user is looking. This goal
is both simpler and higher-level than typical eye tracking analyses,
so instead of applying a fixation filter to the gaze positions (e.g.
Tobii’s I-VT algorithm) to stabilize the signal, we wrote our own
filter. We apply a “majority bounding box” to the data stream. Each
word in the editor is drawn inside of its own bounding box. For
the most recent 10 median eye gaze positions that coincide with
words in the document, the filter identifies the word whose bounding box contains the majority of those 10 points. """;"""Our extension translates the gaze position into an editor character location
to identify the code element at which the user is looking. This goal
is both simpler and higher-level than typical eye tracking analyses,
so instead of applying a fixation filter to the gaze positions (e.g.
Tobii’s I-VT algorithm) to stabilize the signal, we wrote our own
filter.""";Tobii EyeX portable;/;debugging;35;developers;40;code snippet;/;no;no;simple, high-level;
S17;How Programmers Read Regular Code: A Controlled Experiment Using Eye Tracking;https://doi.org/10.1007/s10664-016-9477-x;Jbara, A., & Feitelson, D. G. (2016). How programmers read regular code: a controlled experiment using eye tracking. Empirical Software Engineering, 22(3), 1440–1477. https://doi.org/10.1007/s10664-016-9477-x;2016;journal;Ogama;rectangular smoothing algorithm (scanpath);;"""OGAMA supports many commercial eye trackers like Tobii. In its last version (4.5) support for the Eye Tribe has been added. This builtin support makes the process easier and saves the import of the data between systems.""";Eye Tribe;1280*1024 pixel, 15*12 inches screen, font size 11;program comprehension;18;students;2;code snippet;/;no;no;support;
S18;Through (Tracking) Their Eyes: Abstraction and Complexity in Program Comprehension;http://dx.doi.org/10.1145/3480171;Kather, P., Duran, R., & Vahrenhold, J. (2021). Through (Tracking) their eyes: abstraction and complexity in program comprehension. ACM Transactions on Computing Education, 22(2), 1–33. https://doi.org/10.1145/3480171;2021;journal;Tobii Pro Lab (recording values);analyzed fixation times for areas of interest (AOIs);/;/;Tobii Pro Spectrum;;program comprehension;17;graduate students or working with degree;6;code snippet;/;no;no;;
S19;Visually Analyzing Students' Gaze on C++ Code Snippets;http://dx.doi.org/10.1109/EMIP.2019.00011;Peterson, C. S., Saddler, J. A., Blascheck, T., & Sharif, B. (2019b). Visually Analyzing Students’ Gaze on C++ Code Snippets. 2019 IEEE/ACM 6th International Workshop on Eye Movements in Programming (EMIP). https://doi.org/10.1109/emip.2019.00011;2019;conference;Tobii Studio (fixations, saccades), eyeCode(lines to fixations, AOI);;Vizmanip (correct fixations, https://github.com/SERESLab/fixation-correction-vizmanip);"""Even though Tobii Studio allows us to map fixations to lines,
it does not allow us to correct fixations. For this purpose, we
needed to export all the data out of Tobii Studio, correct the
data using our Vizmanip tool and map lines to fixations using
another tool named eyeCode"" ""The software also comes with
a special AOI image recognition tool that can be used to
automatically generate AOIs for source code snippets""";Tobii X60;/;program comprehension;17;12 novice, 5 non-novice;3;code snippet;C++;no;no;AOI recognition (eyeCode);no fixation correction (Tobii Studio)
S20;Using Eye Tracking to Investigate Reading Patterns and Learning Styles of Software Requirement Inspectors to Enhance Inspection Team Outcome;http://dx.doi.org/10.1145/2961111.2962598;Goswami, A., Walia, G. S., McCourt, M. E., & Padmanabhan, G. (2016). Using Eye Tracking to Investigate Reading Patterns and Learning Styles of Software Requirement Inspectors to Enhance Inspection Team Outcome. ESEM ’16: Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement. https://doi.org/10.1145/2961111.2962598;2016;conference;EyeMMV (fixations, saccades, heatmaps, ROI);/;/;""" EyeMMV tool enabled us to visualize
fixations, scanpaths, and heatmaps""";EyeLink 1000;1080*1920 pixel, 55-60 cm distance;debugging;13;students;2;software requirements;/;no;no;visualization;
S21;How Does Feature Dependency Affect Configurable System Comprehensibility?;http://dx.doi.org/10.1109/ICPC.2019.00016;Santos, D. V. S., & Sant’Anna, C. (2019). How Does Feature Dependency Affect Configurable System Comprehensibility? 2019 IEEE/ACM 27th International Conference on Program Comprehension (ICPC). https://doi.org/10.1109/icpc.2019.00016;2019;conference;Ogama (fixations, AOI, aggregated attention map);/;/;/;Tobii EyeX;"1920*1080 pixel, 15"" screen";debugging;30;6 undergraduate, 6 MsC, 6 PhD, 6 professor, 6 developer industry;6;code snippet;C;no;no;;
S22;Eye Tracking Analysis of Code Layout, Crowding and Dyslexia - An Open Data Set;http://dx.doi.org/10.1145/3448018.3457420;McChesney, I., & Bond, R. (2021). Eye Tracking Analysis of Code Layout, Crowding and Dyslexia - An Open Data Set. ACM Symposium on Eye Tracking Research and Applications. https://doi.org/10.1145/3448018.3457420;2021;conference;Tobii Pro Lab v1.145 (fixations, saccades, AOI);/;/;/;Tobii X3-120;"1920*1080 pixel, 23,6"" screeen, 65 cm distance, 27/18 font size";code comprehension;30;14 dyslexia, 16 control;3;code snippet;Java;no;https://doi.org/10.6084/m9.figshare.c.5304473.v2 ( open data set);;
S23;An Eye Tracking Study on MISRA C Coding Guidelines;http://dx.doi.org/10.1145/3593663.3593671;Homann, A., Grabinger, L., Hauser, F., & Mottok, J. (2023). An Eye Tracking Study on MISRA C Coding Guidelines. ECSEE ’23: Proceedings of the 5th European Conference on Software Engineering Education. https://doi.org/10.1145/3593663.3593671;2023;conference;Tobii Pro Lab v1.145.28180;/;/;/;Tobii Pro Spectrum;"1920*1080 pixel, 23,8"" screen, 300 Hz";debugging;25;students;4;;C;no;www.doi.org/10.5281/zenodo.7898606;robust;
S24;Correlates of programmer efficacy and their link to experience: a combined EEG and eye-tracking study;http://dx.doi.org/10.1145/3540250.3549084;Peitek, N., Bergum, A., Rekrut, M., Mucke, J., Nadig, M., Parnin, C., Siegmund, J., & Apel, S. (2022). Correlates of programmer efficacy and their link to experience: a combined EEG and eye-tracking study. Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering. https://doi.org/10.1145/3540250.3549084;2022;conference;I2CM (fixations, saccades);AOIs;/;"""we used I2CM, which is a noise-robust algorithm""";Tobii Pro Fusion;/;code comprehension;37;27 undergraduates, 10 professionals;32;code snippet;Java;no;https://github.com/brains-on-code/NoviceVsExpert;;
S25;Evaluating gender difference on algorithmic problems using eye-tracker;http://dx.doi.org/10.1145/3204493.3204537;"Obaidellah, U., & Haek, M. A. (2018). Evaluating gender difference on algorithmic problems using eye-tracker. Proceedings of the 2018 ACM Symposium on Eye Tracking Research &Amp; Applications. https://doi.org/10.1145/3204493.3204537";2018;conference;/;/;/;/;Tobii T120;"1280*1024 pixel, 17"" screen, 60 Hz, 50-80 cm disctance";comprehension (non-code);51;undergraduates;6;pseudo code snippet;pseudo code;no;no;;
S26;Do Developers Read Compiler Error Messages?;http://dx.doi.org/10.1109/ICSE.2017.59;Barik, T., Smith, J. C., Lubick, K., Holmes, E., Feng, J., Murphy-Hill, E., & Parnin, C. (2017). Do Developers Read Compiler Error Messages? 2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE). https://doi.org/10.1109/icse.2017.59;2017;conference;GazePoint Software (fixations);/;"""We characterized two additional areas of interest that
transiently displayed error messages: 1) the error popup, which
appears when the developer hovers over the icon in the margin
of the source editor, and 2) the Quick Fix popup, which appears
when the developer hovers over the red wavy underline on
program elements in the source code, or when they activate
the Quick Fix feature explicitly.
To support automatic detection of each of the six areas of
interest, we implemented several techniques. For fixed-sized
AOIs, such as the popups, we extracted isolated screen captures
of each popup and saved them as templates. For dynamicallysized AOIs, we extracted the boundaries of the essential
features of the elements, and then performed a calculation
to dynamically compute its bounding rectangle""";"""The eye tracking instrument internally has a proprietary algorithm for differentiating fixations,
or sustained eye gazes, from other types of rapid eye movement
that naturally occurs as people process information. However,
the instrument has systematic measurement error in that the
fixations locations are misaligned by a constant factor. Thus,
for each of the participants’ tasks, we used the stimuli task as
a baseline to determine the initial horizontal and vertical offset.
For the remaining tasks, we adjusted the baseline as necessary.""";GazePoint GP3;"1920*1024 pixel, 24"" screen";debugging;56;students;10;code snippet;Java;no;https://static.barik.net/barik/gazerbeams/index.html;;proprietary, inaccuracy
S27;A Fine-grained Assessment on Novice Programmers’ Gaze Patterns on Pseudocode Problems;http://dx.doi.org/10.1145/3379156.3391982;Obaidellah, U., Blascheck, T., Guarnera, D. T., & Maletic, J. I. (2020). A fine-grained assessment on novice programmers’ gaze patterns on pseudocode problems. ACM Symposium on Eye Tracking Research and Applications. https://doi.org/10.1145/3379156.3391982;2020;conference;"arules library in R (patterns of AOI sequences), Hierarchical Cluster Analysis (tendency of sharing similar gaze patterns prior to selecting their
first choice of answer.)";/;/;/;Tobii T120;/;comprehension (non-code);56;students;6;pseudo code snippet;pseudo code;no;no;;
S28;A Closer Look at Machine Learning Code;http://dx.doi.org/10.1145/3411763.3451679;Weber, T., Winiker, C., & Hussmann, H. (2021). A Closer Look at Machine Learning Code. CHI EA ’21: Extended Abstracts of the 2021 CHI Conference on Human Factors in Computing Systems. https://doi.org/10.1145/3411763.3451679;2021;conference;not named;/;/;/;Tobii-92;/;program comprehension;6;ML novices;8;code snippet;Python;no;no;;
S29;Is Clustering Novice Programmers Possible? Investigating Scanpath Trend Analysis in Programming Tasks;http://dx.doi.org/10.1145/3588015.3589193;Ahsan, Z., & Obaidellah, U. (2023). Is Clustering Novice Programmers Possible? Investigating Scanpath Trend Analysis in Programming Tasks. ETRA ’23: Proceedings of the 2023 Symposium on Eye Tracking Research and Applications. https://doi.org/10.1145/3588015.3589193;2023;conference;not named;Scanpath Trend Analysis with Levenshtein distance (scanpaths);/;/;Tobii X2-30C;60 cm distance,;program comprehension;60;undergraduates;12;code snippet;Java;no;no;;
S30;When you ignore what you see: How to study proof-readers’ error in pseudocode reading;https://doi.org/10.1145/3379156.3391979;Chitalkina, N., Bednarik, R., Puurtinen, M., & Gruber, H. (2020). When you ignore what you see: How to study proof-readers’ error in pseudocode reading. ACM Symposium on Eye Tracking Research and Applications. https://doi.org/10.1145/3379156.3391979;2020;conference;Tobii Pro Lab with Tobii I-VT (fixations, saccades, AOI);/;/;/;Tobii TX300;1920*1080 pixel;program comprehension;1;expert;14;pseudo code snippet;pseudo code;no;no;;
S31;The effect of poor source code lexicon and readability on developers' cognitive load;https://doi.org/10.1145/3196321.3196347;Fakhoury, S., Ma, Y., Arnaoudova, V., & Adesope, O. (2018). The effect of poor source code lexicon and readability on developers’ cognitive load. The Effect of Poor Source Code Lexicon and Readability on Developers’ Cognitive Load. https://doi.org/10.1145/3196321.3196347;2018;conference;iTrace;/;extend the iTrace plugin to identify source code elements at a lower level of granularity, which is terms that compose identifiers;"""iTrace has
a fixation filter to filter out noisy data that may arise due to errors
from the eyetracker""";EyeTribe;18 font size;program comprehension, comprehension (noncode), debugging;15;students;4;code snippet;Java;no;https://github.com/smfakhoury/fNIRS-and-Cognitive-Load;fixation filter;
S32;Observations on the Linear Order of Program Code Reading Patterns in Programmers with Dyslexia;https://doi.org/10.1145/3383219.3383228;McChesney, I., & Bond, R. (2020). Observations on the Linear Order of Program Code Reading Patterns in Programmers with Dyslexia. Observations on the Linear Order of Program Code Reading Patterns in Programmers With Dyslexia. https://doi.org/10.1145/3383219.3383228;2020;conference;not named;Linearity of code reading (Busjahn et al., saccades), Needleman-Wunsch ( compare gaze patterns from eye gaze recordings);/;/;Tobii X60;"22"" screen, 1280*800 pixel, 60Hz, 22.5 font size, 70 cm distance";program comprehension;28;14 dyslexia, 14 without dyslexia;3;code snippet;Java;no;no;;
S33;An Analysis Scheme to Interpret Students' Cognitive Process in Error Finding Test;https://doi.org/10.1145/3425329.3425350;Liu, L., Liu, W., Li, X., Xu, J., & Cheng, W. (2020). An Analysis Scheme to Interpret Students’ Cognitive Process in Error Finding Test. An Analysis Scheme to Interpret Students’ Cognitive Process in Error Finding Test. https://doi.org/10.1145/3425329.3425350;2020;conference;not named;Matched Eye Movement Ratio;;;Tobii;/;debugging;19;undergraduates;4;code snippet;C;no;no;;
S34;Estimating developers' cognitive load at a fine-grained level using eye-tracking measures;https://doi.org/10.1145/3524610.3527890;Abbad-Andaloussi, A., Sorg, T., & Weber, B. (2022). Estimating developers’ cognitive load at a fine-grained level using eye-tracking measures. Estimating Developers’ Cognitive Load at a Fine-grained Level Using Eye-tracking Measures. https://doi.org/10.1145/3524610.3527890;2022;conference;iTrace (map gaze data with lines and columns), iMotions v.8.2 (fixations, pupil data, synchronizatiuon GSR<->eyetracking data);/;/;"""We used both iTrace and
iMotions to leverage their strengths. In particular, iTrace was used
to automatically map the forwarded gaze data with the lines and
columns gazed by the participant when reading the source code
in Eclipse IDE. iMotions, in turn, was used to design and run the
protocol of the experiment as well as to record pupil data and derive fixations (using the I-VT algorithm [37]) from the forwarded
gaze data. Moreover, the tool allowed us to monitor developers’
eye-movements and keep a constant eye on the data quality during
the data collection. Furthermore, since we have collected Galvanic
Skin Response (GSR) data (which will be analyzed in a follow-up
study), we used iMotions to handle the synchronization between
the GSR and the eye-tracking data.""";Tobii X3-120;;program comprehension;16;6 researchers, 6 PhD, 3 students, 1 IT administrator;9;code snippet;Java;no;https://github.com/aminobest/ICPC2022_fineGrainedCL;map data (iTrace), synchronization (iMotions);
S35;Predicting Successful Collaboration in a Pair Programming Eye Tracking Experiment;https://doi.org/10.1145/3213586.3225234;Villamor, M., & Rodrigo, M. M. T. (2018). Predicting Successful Collaboration in a Pair Programming Eye Tracking Experiment. Predicting Successful Collaboration in a Pair Programming Eye Tracking Experiment. https://doi.org/10.1145/3213586.3225234;2018;conference;CRP toolbox for MATLAB (CRQA);/;/;"""The challenge of using CRQA is finding optimal parameters
for delay, embed, and radius """;Gazepoint eye tracker;/;collaborative, debugging;84;students;12;code snippet;/;no;no;;finding optimal parameters
S36;Synchronized Analysis of Eye Movement and EEG during Program Comprehension;https://doi.org/10.1109/EMIP.2019.00012;Ishida, T., & Uwano, H. (2019). Synchronized Analysis of Eye Movement and EEG during Program Comprehension. Synchronized Analysis of Eye Movement and EEG During Program Comprehension. https://doi.org/10.1109/emip.2019.00012;2019;conference;none;/;"C# GUI application with three tabbed-windows to display the task materials, records synchronized eye
movement and operation (tab switching) for analysis (fixation ratio of each material)";;Tobii 4C;"1920*1080 pixel, 21,3"" screen,";program comprehension;5;undergraduates;16;code snippet;Java;no;no;;
S37;Toward conjoint analysis of simultaneous eye-tracking and fMRI data for program-comprehension studies;http://dx.doi.org/10.1145/3216723.3216725;Peitek, N., Siegmund, J., Parnin, C., Apel, S., & Brechmann, A. (2018b). Toward conjoint analysis of simultaneous eye-tracking and fMRI data for program-comprehension studies. Toward Conjoint Analysis of Simultaneous Eye-tracking and fMRI Data for Program-comprehension Studies. https://doi.org/10.1145/3216723.3216725;2018;conference;Ogama (fixations, saccades, AOI, heat maps);/;/;"""We see the need for a dedicated open-source tool that
similarly sets the base for simultaneous fMRI and eye-tracking experiments and, in the long term, for multi-modal experiments of
program comprehension."" ""Ogama is an established eye-tracking
analysis tool, which provides capabilities
for replaying recorded data, heat maps, area-of-interest (AOI) analysis, and statistical analysis """;EyeLink 1000;/;program comprehension;22;students;25;code snippet;Java;no;https://github.com/brains-on-code/simultaneous-fmri-and-eyetracking;well-established;no synchronization betweem fMRI and eye tracker
S38;Trustworthiness Perceptions in Code Review: An Eye-tracking Study;http://dx.doi.org/10.1145/3382494.3422164;Bertram, I., Hong, J., Huang, Y., Weimer, W., & Sharafi, Z. (2020). Trustworthiness Perceptions in Code Review. Trustworthiness Perceptions in Code Review: An Eye-tracking Study. https://doi.org/10.1145/3382494.3422164;2020;conference;iTrace (fixations, saccades);/;/;"""To support scrolling, switching
between files, and editing files, we installed and used the iTrace
0.0.1A plugin [32], which gathers all necessary measurements while
allowing participants to interact with source code and other artifacts naturally.""";Tobii Pro X3-120;"70 cm distance, 27"" screen, 1920*1080 pixel";debugging;10;5 undergraduates and 5 graduates;6;code snippet;Java;yes;https://web.eecs.umich.edu/~weimerw/data/trust-perception/;scrolling, interaction;
S39;Attention in Software Maintenance: An Eye Tracking Study;http://dx.doi.org/10.1109/EMIP.2019.00009;Ahrens, M., Schneider, K., & Busch, M. (2019). Attention in Software Maintenance: An Eye Tracking Study. Attention in Software Maintenance: An Eye Tracking Study. https://doi.org/10.1109/emip.2019.00009;2019;conference;Tobii I-VT fixation filter (fixations, saccades);/;""" we built a copy of the Eclipse IDE as a website. 
This web image of Eclipse supports eye tracking code files 
that require scrolling, as well as switching between code tabs.""";"""Current state of the art eye trackers are still limited when
it comes to recording dynamical content such as scrollable or
editable areas. As of now, the only environment that supports
scrolling is static websites shown in the browser. Hence, most
eye tracking studies that investigate program comprehension
only observe code snippets limited to screen size. To create
a more realistic setup and be able to show longer and more
code files, we built a copy of the Eclipse IDE as a website.""";Tobii X3-120;"24"" screen, 1920*1200 pixel";program comprehension;22;8 students, 8 PhD, 6 professional developers;6;code snippet;Java;yes;no;scrolling, more realistic;
S40;How Readable is Model-generated Code? Examining Readability and Visual Inspection of GitHub Copilot;http://dx.doi.org/10.1145/3551349.3560438;Madi, N. A. (2022). How Readable is Model-generated Code? Examining Readability and Visual Inspection of GitHub Copilot. How Readable Is Model-generated Code? Examining Readability and Visual Inspection of GitHub Copilot. https://doi.org/10.1145/3551349.3560438;2022;conference;/;/;"""Our tool generates token-level Areas Of Interest (AOIs) as shown
in Figure 1. With this, we can conduct a hit test to examine if
a fixation was over a token or not using the Eye-Movement in
Programming Toolkit (EMTK) [2]. This process is repeated until all
the fixations in the experiment were analyzed. With this procedure,
we were able to collect relevant eye movement data in a dynamic
and natural coding environment""";"""We developed our own tool for tracking eye movement in the VS
Code IDE. Since existing tools for eye tracking in IDEs such as
iTrace [21] do not yet support VS Code, and Copilot was only
available on VS Code during the time of our experiment.""";EyeLink 1000 Plus;1920*1080 pixel;collaborative;21;students;3;code snippet;Python;yes;https://osf.io/ghfqz/;;Copilot only available on VSCode
S41;A Gaze-Based Exploratory Study on the Information Seeking Behavior of Developers on Stack Overflow;http://dx.doi.org/10.1145/3290607.3312801;Peterson, C. S., Saddler, J. A., Halavick, N. M., & Sharif, B. (2019). A Gaze-Based Exploratory Study on the Information Seeking Behavior of Developers on Stack Overflow. A Gaze-Based Exploratory Study on the Information Seeking Behavior of Developers on Stack Overflow. https://doi.org/10.1145/3290607.3312801;2019;conference;iTrace (mapping eye gaze on meaningful elements);/;/;"""We used the eye tracking
infrastructure iTrace [3] (www.i-trace.org), that connects to an eye tracker and automatically maps
eye gaze on semantically meaningful elements in the code (if statements, identifiers ...) and in Stack Overflow (title, description, code, images, comments, etc...). This mapping works in the presence
of scrolling and context switching. Currently, iTrace is the only tool that can do this automatically.""";Tobii X-60;/;program comprehension;15;students;4;code snippet;Java;yes;no;mapping to meaningful elements, scrolling, only tool that can do this;
S42;Using Eye-Tracking to Unveil Differences Between Kids and Teens in Coding Activities;http://dx.doi.org/10.1145/3078072.3079740;Papavlasopoulou, S., Sharma, K., Giannakos, M. N., & Jaccheri, L. (2017). Using Eye-Tracking to Unveil Differences Between Kids and Teens in Coding Activities. Using Eye-Tracking to Unveil Differences Between Kids and Teens in Coding Activities. https://doi.org/10.1145/3078072.3079740;2017;conference;not named;Gaze similarity;/;/;4 SMI RED 250, 1 TOBII mobile;;collaborative;44;children;2;code snippet;Scratch;no;no;;
S43;An Eye Tracking Perspective on How Developers Rate Source Code Readability Rules;https://doi.org/10.1109/ASEW52652.2021.00037;Peterson, C. S., Park, K., Baysinger, I., & Sharif, B. (2021). An Eye Tracking Perspective on How Developers Rate Source Code Readability Rules. An Eye Tracking Perspective on How Developers Rate Source Code Readability Rules. https://doi.org/10.1109/asew52652.2021.00037;2021;conference;I-VT fixation filter (fixations), eyeCode (mapping);/;/;/;Tobii X60;/;program comprehension;14;9 undergraduates, 5 graduates;8;code snippet;Java;no;no;;
S44;The Examination Task of Source-code Debugging Using GP3 Eye Tracker;https://doi.org/10.1109/CogInfoCom47531.2019.9089952;Katona, J., Kovari, A., Costescu, C., Rosan, A., Hathazi, A., Heldal, I., Helgesen, C., Thill, S., & Demeter, R. (2019). The Examination Task of Source-code Debugging Using GP3 Eye Tracker. The Examination Task of Source-code Debugging Using GP3 Eye Tracker. https://doi.org/10.1109/coginfocom47531.2019.9089952;2019;conference;Ogama;/;/;"""The OGAMA (OpenGazeAndMouseAnalyzer) is an opensource application written in C# high-level programming
language, which was developed to track, record and examine
eye and mouse motion. The application, among others, can
store the data of different eye and mouse motions into a
database, whereas exporting helps different stats software packages to evaluate them. The software supports several eye
motion tracker units, including the Gazepoint GP3 to be used,
moreover, thanks to its open-source feature, we can easily
modify that according to our needs.""";GP3 Eye Tracker;"1920*1080 pixel, 22"" screen";debugging;16;students;1;code snippet;C#;no;no;support for several eye trackers, open-source, easily modifiable;
S45;An Eye Tracking Research on Debugging Strategies towards Different Types of Bugs;https://doi.org/10.1109/COMPSAC.2016.57;Peng, F., Li, C., Song, X., Hu, W., & Feng, G. (2016). An Eye Tracking Research on Debugging Strategies towards Different Types of Bugs. An Eye Tracking Research on Debugging Strategies Towards Different Types of Bugs. https://doi.org/10.1109/compsac.2016.57;2016;conference;Tobii Studio;/;/;/;Tobii X60;"1920*1080 pixel, 21,5"" screen, 50-70 cm distance";debugging;20;undergraduates;2;code snippet;Java;no;no;;
S46;Recognizing eye tracking traits for source code review;https://doi.org/10.1109/ETFA.2017.8247637;Chandrika, K., Amudha, J., & Sudarsan, S. D. (2017). Recognizing eye tracking traits for source code review. Recognizing Eye Tracking Traits for Source Code Review. https://doi.org/10.1109/etfa.2017.8247637;2017;conference;"PyGaze (fixation count, fixation duration,
saccade count and saccade duration)";"""To compute
the local eye tracking traits, a function was written that takes the
AOI starting (x,y) position, width and height of the AOI as input
and outputs the dwells and dwell time in the AOI. """;/;/;SMI Redn Professional;1366*768 pixel,;debugging;24;19 with programming skills, 5 without;4;code snippet;C#;no;no;;
S47;Eye-tracking analysis of source code reading on a line-by-line basis;https://doi.org/10.1145/3524488.3527364;Eye-tracking analysis of source code reading on a line-by-line basis. (2022, May 1). IEEE Conference Publication | IEEE Xplore. https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9808975;2022;conference;not named;/;/;/;/;/;program comprehension;40;36 students/novices, 4 experts;1;code snippet;C#;no;no;;
S48;Developing visual expertise in software engineering: An eye tracking study;https://doi.org/10.1109/EDUCON.2016.7474614;Nivala, M., Hauser, F., Mottok, J., & Gruber, H. (2016). Developing visual expertise in software engineering: An eye tracking study. Developing Visual Expertise in Software Engineering: An Eye Tracking Study. https://doi.org/10.1109/educon.2016.7474614;2016;conference;not named;/;/;/;SMI remote eye tracker;/;debugging;23;15 novices, 8 experts;8;code snippet;C;no;no;;
S49;An Eye-Tracking study of Java programmers and application to source code summarization;https://doi.org/10.1109/TSE.2015.2442238;Rodeghero, P., Liu, C., McBurney, P. W., & McMillan, C. (2015). An Eye-Tracking study of Java programmers and application to source code summarization. IEEE Transactions on Software Engineering, 41(11), 1038–1054. https://doi.org/10.1109/tse.2015.2442238;2015;journal;Ogama (gaze time, fixations, and regressions);/;/;/;Tobii TX300;"10 font size, 24"" screen";program comprehension;10;professionals;67;code snippet;Java;no;http://www3.nd.edu/~prodeghe/projects/eyesum/;;
S50;Gaze as a Proxy for Cognition and Communication;https://doi.org/10.1109/ICALT.2018.00043;Jermann, P., & Sharma, K. (2018). Gaze as a Proxy for Cognition and Communication. Gaze as a Proxy for Cognition and Communication. https://doi.org/10.1109/icalt.2018.00043;2018;conference;not named;/;/;/;Tobii 1750;/;collaborative;82;students;10;code snippet;Java;yes;no;;
S51;Tracking students’ cognitive processes during Program Debugging—An Eye-Movement approach;https://doi.org/10.1109/TE.2015.2487341;Lin, Y., Wu, C., Hou, T., Lin, Y., Yang, F., & Chang, C. (2016). Tracking students’ cognitive processes during Program Debugging—An Eye-Movement approach. IEEE Transactions on Education, 59(3), 175–186. https://doi.org/10.1109/te.2015.2487341;2016;journal;Data Viewer (ROI gaze sequences) (http://www.sr-research.com/);/;/;/;Eyelink 1000;1024*768 pixel, 86 cm distance;debugging;38;undergraduates;2;;C;no;no;;
S52;Eye Movements in Code Reading: Relaxing the Linear Order;https://doi.org/10.1109/ICPC.2015.36;Busjahn, T., Bednarik, R., Begel, A., Crosby, M. E., Paterson, J. H., Schulte, C., Sharif, B., & Tamm, S. (2015). Eye Movements in Code Reading: Relaxing the Linear Order. Eye Movements in Code Reading: Relaxing the Linear Order. https://doi.org/10.1109/icpc.2015.36;2015;conference;Ogama (recording data), EyeCode(mapping to line and word);NeedlemanWunsch (comparison between Story ORder and Execution Order);/;/;SMI RED-m remote eye tracker;/;program comprehension;20;14 novices, 6 professionals;novices 3, experts 6;code snippet;Java, natural language;no;no;;
S53;Predicting expertise among novice programmers with prior knowledge on programming tasks;https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9306263;Predicting expertise among novice programmers with prior knowledge on programming tasks. (2020, December 7). IEEE Conference Publication | IEEE Xplore. https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9306263;2020;conference;Tobii Studio (fixations, Total Fixation Duration);/;/;/;Tobii X2-30C;/;program comprehension;60;undergraduates;12;code snippet;/;no;no;;
S54;Eyes on Code: A study on developers’ code navigation strategies;https://doi.org/10.1109/TSE.2020.3032064;Sharafi, Z., Bertram, I., Flanagan, M. J., & Weimer, W. (2022). Eyes on Code: A study on developers’ code navigation strategies. IEEE Transactions on Software Engineering, 48(5), 1692–1704. https://doi.org/10.1109/tse.2020.3032064;2022;journal;iTrace (fixations with I-VT algorithm);/;"""We formalize areas of interest in the source code files using a two-dimensional mask (or filter) on the screen (at a particular point in time) that selects relevant data. Instead of pixels, we use characters as the most basic spatial units. iTrace records the line and column numbers associated with a particular fixation. The position of a single character’s cell is defined by zero-indexed line and column numbers. We produce a 2D logical array describing the intersection between the subjects’ gaze and the code in the a specific source code file. Formally, each of our AOIs is a
rectangular bounding box around a set of characters. We compute an intermediate two-dimensional array of of fixation counts, correspond to the generated bounding boxes. We then apply Gaussian smoothing (smoothing parameter = 5.0) and thresholding to a matrix representing on-screen eye fixations to obtain a mask. The mask corresponds to areas in which substantial numbers of fixations occurred during a given period. This matrix-smoothing method is inspired by the approach of Caldara et al. [39], as implemented in their iMap4 tool [40]. We then further intersect the mask with the position of a stimulus to compute a set of areas in which the given stimulus was fixated on many times. The process is illustrated in Fig. 1. The first step is generating the gaze mask. Lighter circles in the left image show eye fixations. The middle image shows relevant code elements (horizontal lines), and the right image shows their intersection (with semantic code elements labeled via colors). The darkest line is over the package name, the next few lines all belong to the comment preceding the class definition, member variables, and so on. We use this technique as a filtering method. Fixations outside of these AOIs are assumed to be located over whitespace (as in the lower-right visual fixation in Fig. 1), or over areas that were not given enough attention to be significant to software engineering behavior and decisions. Such fixations are removed from further analysis."" (AOI)";"""Existing eye-tracking software, such as iTrace [35], [36],
supports scrolling, and some other navigation features, but
do not support edits to the code. Also, iTrace plugin collects
eye gaze data only within the IDE code window."" ""The iTrace plugin collected eye gaze data only within
Eclipse code pane (window). Thus, we do not have any
records of developers’ eye movements when they use other
parts of the IDE"" ""Our analysis is based on automatically inferring AOIs. A
possible threat is that our inference approach could be inaccurate. To partially mitigate this threat, we manually analyzed a sample of the participants’ data and the extracted
AOIs for validity and determined them to be reasonable,
acknowledging that an assessment by the authors does not
give as much confidence as a full independent assessment
or replication""";Tobii Pro X3-120;"70 cm distance, 27"" screen, 1920*1080 pixel";debugging;36;20 undergraduates, 16 MsC/PhD;1;code snippet;Java;yes;https://web.eecs.umich.edu/~weimerw/data/navigation-behavior/;;no support for edits, collection of data only in IDE window, automatically calculated AIO could be false
S55;Investigating the Effect of Polyglot Programming on Developers;https://doi.org/10.1109/VL/HCC51201.2021.9576404;Peterson, C. S. (2021). Investigating the Effect of Polyglot Programming on Developers. Investigating the Effect of Polyglot Programming on Developers. https://doi.org/10.1109/vl/hcc51201.2021.9576404;2021;conference;/;/;/;/;/;/;debugging;31;15 non-professionals, 16 professionals;6;code snippet;SQL, not named;/;no;;
S56;Task-oriented Analysis on Debugging Process Based on Eye Movements and IDE Interactions;https://doi.org/10.1109/ICCSE51940.2021.9569438;Li, X., Liu, W., Liu, H., Xu, J., & Cheng, W. (2021). Task-oriented Analysis on Debugging Process Based on Eye Movements and IDE Interactions. Task-oriented Analysis on Debugging Process Based on Eye Movements and IDE Interactions. https://doi.org/10.1109/iccse51940.2021.9569438;2021;conference;iTrace (fixations);/;/;/;Tobii EyeX;/;debugging;13;postgraduates;1;code snippet;C;yes;no;;
S57;EEG activities during Program Comprehension: An Exploration of Cognition;https://doi.org/10.1109/ACCESS.2021.3107795;Yang, L., Liao, Y., Hu, X., & Wu, C. (2021). EEG activities during Program Comprehension: An Exploration of Cognition. IEEE Access, 9, 120407–120421. https://doi.org/10.1109/access.2021.3107795;2021;journal;eye tracker package (probably Tobii Studio) (eye gaze to ROI);/;/;/;Tobii X120;52*29 cm screen;program comprehension;33;undergraduates;2;code snippet;C;/;no;;
S58;Spotting Problematic Code Lines using Nonintrusive Programmers' Biofeedback;https://doi.org/10.1109/ISSRE.2019.00019;Couceiro, R., Carvalho, P., Castelo-Branco, M., Madeira, H., Barbosa, R., Duraes, J., Duarte, G., Castelhano, J., Duarte, C., Teixeira, C., Laranjeiro, N., & Medeiros, J. (2019). Spotting Problematic Code Lines using Nonintrusive Programmers’ Biofeedback. Spotting Problematic Code Lines Using Nonintrusive Programmers’ Biofeedback. https://doi.org/10.1109/issre.2019.00019;2019;conference;/;"""To achieve these objective the first step was the preprocessing of the POR data. Firstly, the x-y coordinates of the
POR were down sampled to 10 Hz. Secondly, although there
is a calibration step of the eye tracker prior to the beginning of
each task, it was observed that some POR data was still
displaced. In order to correct this displacement, the POR data
was shifted with an increment corresponding to the difference
(in the x and y axis) between the median of the POR values
during the fixation of the calibration cross and the actual
calibration cross. The third step of the pre-processing stage
was the removal of the POR values that laid outside the code
snipped area. This was accomplished by defining the contour
of the code snippet (with an offset) and identifying all POR
values inside this region""";/;/;SMI Senso Motoric Instruments;/;program comprehension;30;12 intermediate, 14 advanced, 4 experts;3;code snippet;Java;no;no;;
S59;Quality evaluation of modern code reviews through intelligent biometric program comprehension;https://doi.org/10.1109/TSE.2022.3158543;Hijazi, H., Duraes, J., Couceiro, R., Castelhano, J., Barbosa, R., Medeiros, J., Castelo-Branco, M., Carvalho, P., & Madeira, H. (2023). Quality evaluation of modern code reviews through intelligent biometric program comprehension. IEEE Transactions on Software Engineering, 49(2), 626–645. https://doi.org/10.1109/tse.2022.3158543;2023;journal;not named;/;/;/;SMI eye tracker;/;debugging;21;18 MSc/PhD, 3 industry;4;code snippet;C;no;https://github.com/HaythamHijazi/Supplement;;
S60;Assessing Students’ Behavior in Error Finding Programming Tests: An Eye-Tracking Based Approach;https://doi.org/10.1109/TALE48000.2019.9225906;Li, X., Liu, W., Wang, W., Zhong, J., & Yu, M. (2019). Assessing Students’ Behavior in Error Finding Programming Tests: An Eye-Tracking Based Approach. Assessing Students’ Behavior in Error Finding Programming Tests: An Eye-Tracking Based Approach. https://doi.org/10.1109/tale48000.2019.9225906;2019;conference;I-VT filter (fixations/saccades);/;/;/;Tobii eye tracker;/;debugging;15;undergraduates;4;code snippet;C;no;no;;
S61;Modeling of cognitive processes based on gaze transition during programming debugging;https://doi.org/10.1109/LifeTech52111.2021.9391940;Kano, T., Sakagami, R., & Akakura, T. (2021). Modeling of cognitive processes based on gaze transition during programming debugging. 2021 IEEE 3rd Global Conference on Life Sciences and Technologies (LifeTech). https://doi.org/10.1109/lifetech52111.2021.9391940;2021;conference;not named;/;/;/;Tobii 4C;;debugging;15;students;10;code snippet;/;/;no;;
S62;Studying Developer Reading Behavior on Stack Overflow during API Summarization Tasks;https://doi.org/10.1109/SANER48275.2020.9054848;Saddler, J. A., Peterson, C. S., Sama, S., Nagaraj, S., Baysal, O., Guerrouj, L., & Sharif, B. (2020). Studying Developer Reading Behavior on Stack Overflow during API Summarization Tasks. Studying Developer Reading Behavior on Stack Overflow During API Summarization Tasks. https://doi.org/10.1109/saner48275.2020.9054848;2020;conference;iTrace (fixations) (Olsson fixation filter);/;/;"""plugin has been effectively used for determining feasibility of
deriving traceability links between code and bug reports using
gaze [24] and for large realistic program comprehension [14]
studies. iTrace is able to automatically map the eye gazes
to semantically meaningful elements on Stack Overflow (and
source code). """;Tobii X60;/;program comprehension;30;MSc/PhD;4;code snippet;Java;yes;http://seresl.unl.edu/SANER2020;effectively used for deriving traceability links, mapping to meaningful elements;
S63;Towards a tool for visualizing pupil dilation linked with source code artifacts;https://doi.org/10.1109/VISSOFT51673.2020.00016;Ioannou, C., Bakgaard, P., Kindler, E., & Weber, B. (2020). Towards a tool for visualizing pupil dilation linked with source code artifacts. Towards a Tool for Visualizing Pupil Dilation Linked With Source Code Artifacts. https://doi.org/10.1109/vissoft51673.2020.00016;2020;conference;iTrace (link gaze point to software artifact, AOI);"""a velocity-based threshold algorithm similar to the ones described in [28] and obtained a time series of labelled gaze data"" (fixations) ""Estimate pupil dilation
Once we filtered the pupil diameter measurements, we
continued to estimate the pupil dilations. First, the average
pupil diameter for each fixation was calculated and then
we subtracted the grand mean of all fixations average pupil
diameters, resulting in the pupil dilation for each fixation."" (pupil dilation)";/;"""iTrace captures eye tracking
data and links them to software artifacts while developer
navigate and read source code. These data enable the link
of a gaze point (x,y) to the respective source code element
including the line and column number that developer looked
at, they entail a timestamp (eye trackers’ timestamp) and also
the pupil diameter""";Tobii 300X;"23"" screen, 14 font size, 60 cm distance";program comprehension;8;academic background in CS or related;5;code snippet;Java;yes;no;mapping to meaningful elements;
S64;Assessing perceived sentiment in pull requests with emoji: Evidence from tools and developer Eye Movements;https://doi.org/10.1109/SEmotion52567.2021.00009;Park, K., & Sharif, B. (2021). Assessing Perceived Sentiment in Pull Requests with Emoji: Evidence from Tools and Developer Eye Movements. Assessing Perceived Sentiment in Pull Requests With Emoji: Evidence From Tools and Developer Eye Movements. https://doi.org/10.1109/semotion52567.2021.00009;2021;conference;iTrace Core + Chrome Plugin (data), I-VT fixation filter (fixations);/;/;/;Tobii Pro TX300;/;debugging;6;2 undergraduates, 2 graduates, 2 professionals;24;pull requests;JS, CoffeeScript, Ruby, ...;yes;https://zenodo.org/record/4602631;;
S65;“I just looked for the solution!”On Integrating Security-Relevant Information in Non-Security API Documentation to Support Secure Coding Practices;https://doi.org/10.1109/TSE.2021.3094171;Gorski, P. L., Möller, S., Wiefling, S., & Lo Iacono, L. (2022). “I just looked for the solution!”On Integrating Security-Relevant Information in Non-Security API Documentation to Support Secure Coding Practices. IEEE Transactions on Software Engineering, 48(9), 3467–3484. https://doi.org/10.1109/tse.2021.3094171;2022;journal;iMotions7 (data, fixations);/;/;/;Gazepoint GP3 HD;/;program comprehension;49;students;4;code snippet;Go;yes;no;;
S66;Using Eye- Tracking to Examine Query Syntax and Method Syntax Comprehension in LINQ;https://doi.org/10.1109/CogInfoCom50765.2020.9237910;Katona, J., Kovari, A., Heldal, I., Costescu, C., Rosan, A., Demeter, R., Thill, S., & Stefanut, T. (2020). Using Eye- Tracking to Examine Query Syntax and Method Syntax Comprehension in LINQ. Using Eye- Tracking to Examine Query Syntax and Method Syntax Comprehension in LINQ. https://doi.org/10.1109/coginfocom50765.2020.9237910;2020;conference;Ogama (fixations, saccades);/;/;"""as well as the OGAMA
(OpenGazeAndMouseAnalyter) software package were applied
that were also used successfully in [60-66] research.""";Gazepoint GP3;"1920*1080 pixel, 22"" screen";program comprehension;34;students;10;code snippet;LINQ;no;no;successful in research;
S67;Do structured flowcharts outperform pseudocode? Evidence from eye movements;https://doi.org/10.1109/ACCESS.2022.3230981;Andrzejewska, M., & Stolińska, A. (2022). Do structured flowcharts outperform pseudocode? Evidence from eye movements. IEEE Access, 10, 132965–132975. https://doi.org/10.1109/access.2022.3230981;2022;journal;SMI BeGaze 2.4 (Key Performance Indicators (KPIs));/;/;/;SMI iViewX Hi-Speed;"1920*1080 pixel, 23"" screen";;114;students;12;flowcharts/pseudocode snippet;pseudocode;no;no;;
S68;Impact of the visitor pattern on program comprehension and maintenance;10.1109/ESEM.2009.5316015;Jeanmart, S., Guéhéneuc, Y., Sahraoui, H., & Habra, N. (2009). Impact of the visitor pattern on program comprehension and maintenance. Impact of the Visitor Pattern on Program Comprehension and Maintenance. https://doi.org/10.1109/esem.2009.5316015;2009;conference;not named;/;/;/;EyeLink II;/;program comprehension;24;17 graduate, 7 postgraduate;6;UML class diagram;/;no;http://www.ptidej.net/downloads/experiments/esem09/ (not available anymore);;
S69;TAUPE: towards understanding program comprehension;https://doi.org/10.1145/1188966.1188968;Guéhéneuc, Y. (2006). TAUPE. TAUPE: Towards Understanding Program Comprehension. https://doi.org/10.1145/1188966.1188968;2006;conference;TAUPE (AOI mapping), not named (fixations, saccades);/;/;"""We introduce a new visualisation technique to aggregate and to present the collected
data"" (TAUPE)";EyeLink II;/;program comprehension;12;graduate students;2;UML class diagram;/;no;no;new visualization technique;
S70;Understanding collaborative program comprehension: interlacing gaze and dialogues;https://repository.isls.org/bitstream/1/1944/1/430-437.pdf;Sharma, K. (2013). Understanding collaborative program comprehension: interlacing gaze and dialogues. repository.isls.org. https://doi.org/10.22318/cscl2013.1.430;2013;conference;not named;Gaze Tokens, Gaze Transitions, Gaze Episodes;/;/;Tobii 1750;/;collaborative;32;students;10;code snippet;Java;no;no;;
S71;Eye-Tracking the factors of process model comprehension tasks;https://doi.org/10.1007/978-3-642-38709-8_15;Petrusel, R., & Mendling, J. (2013). Eye-Tracking the factors of process model comprehension tasks. In Springer eBooks (pp. 224–239). https://doi.org/10.1007/978-3-642-38709-8_15;2013;conference;not named;/;/;/;fixed-head eye tracker by Arrington Research;/;comprehension (non-code);26;professionals;5;BPMN diagram;/;no;no;;
S72;Analysis of code reading to gain more insight in program comprehension;https://doi.org/10.1145/2094131.2094133;Busjahn, T., Schulte, C., & Busjahn, A. (2011). Analysis of code reading to gain more insight in program comprehension. Analysis of Code Reading to Gain More Insight in Program Comprehension. https://doi.org/10.1145/2094131.2094133;2011;conference;Tobii Studio 2.0.6;"""Tobii Studio did not provide a sufficient analysis module, therefore a series of evaluation software had to be developed. Merely
time, coordinates and duration of fixations were exported from
Tobii Studio and processed with Matlab 7.4. In order to map the
fixations to a word, the coordinates of the word have to be
known, but manual capture of over 1000 words is barely feasible. So a tool was implemented using ImageJ, which identified
the word's coordinates from an image containing the word's
location on the screen and the stimulus text. """;/;"""Tobii Studio did not provide a sufficient analysis module, therefore a series of evaluation software had to be developed.""";Tobii T120;"17"" screen";program comprehension;15;novices to experts;11;code snippet;Java;no;no;;no sufficient analysis module
S73;An eye tracking study on the effects of layout in understanding the role of design patterns;https://doi.org/10.1109/ICSM.2010.5609582;Sharif, B., & Maletic, J. I. (2010). An eye tracking study on the effects of layout in understanding the role of design patterns. An Eye Tracking Study on the Effects of Layout in Understanding the Role of Design Patterns. https://doi.org/10.1109/icsm.2010.5609582;2010;conference;"ClearView ""software that
comes with the eye tracker""";/;/;/;Tobii 1750;"17"" screen, 1024*768 pixel, 60 cm distance";program comprehension;12;7 undergraduates, 6 graduates, 2 faculty members;8;UML class diagram;/;no;no;;
S74;Assessing the Comprehension of UML Class Diagrams via Eye Tracking;https://doi.org/10.1109/ICPC.2007.10;Yusuf, S., Kagdi, H., & Maletic, J. I. (2007). Assessing the Comprehension of UML Class Diagrams via Eye Tracking. Assessing the Comprehension of UML Class Diagrams via Eye Tracking. https://doi.org/10.1109/icpc.2007.10;2007;conference;"""Software that records the
XY screen coordinates of eye gazes and supports analysis
of eye movements is also provided along with the eyetracker system.""";/;/;/;Tobii 1750;"17"" screen, 1024*768 pixel, 60 cm distance";program comprehension;12;3 non CS graduates, 3 faculty, 4 PhD, 1 MSc, 1 undergraduate;27;UML class diagram;/;no;no;;
S75;"Women and men &amp;#x2014; Different but equal: On the impact of identifier style on source code reading";https://doi.org/10.1109/ICPC.2012.6240505;"Sharafi, Z., Soh, Z., Guéhéneuc, Y., & Antoniol, G. (2012). Women and men &#x2014; Different but equal: On the impact of identifier style on source code reading. Women and Men — Different but Equal: On the Impact of Identifier Style on Source Code Reading. https://doi.org/10.1109/icpc.2012.6240505";2012;conference;Taupe (AOI mapping), Gaze Tracker (data);/;/;"""We defined
the Areas Of Interest (AOI) on the stimuli and the subjects
characteristics. Then, Taupe provided the results in CSV files
that we exported to R [27] to apply statistic analyses.""";FaceLAB;"27"" screen, 70 cm distance, 1920*1080 pixel";program comprehension;26;students;3;code snippet;Java;no;no;;
S76;Professional status and expertise for UML class diagram comprehension: An empirical study;https://doi.org/10.1109/ICPC.2012.6240484;Soh, Z., Sharafi, Z., Van Den Plas, B., Porras, G. C., Guéhéneuc, Y., & Antoniol, G. (2012). Professional status and expertise for UML class diagram comprehension: An empirical study. Professional Status and Expertise for UML Class Diagram Comprehension: An Empirical Study. https://doi.org/10.1109/icpc.2012.6240484;2012;conference;Taupe (AOI mapping);/;/;"""Then,Taupe provided the results of preprocessing in CSV files that
we used into R [13] to apply statistical tests. """;EyeLink II;/;program comprehension;21;12 students, 9 pratictioners;3;UML class diagram;/;no;http://www.ptidej.net/download/experiments/icpc12a/ (not available anymore);;
S77;An empirical study on the efficiency of graphical vs. textual representations in requirements comprehension;https://doi.org/10.1109/ICPC.2013.6613831;Sharafi, Z., Marchetto, A., Susi, A., Antoniol, G., & Gueheneuc, Y. (2013). An empirical study on the efficiency of graphical vs. textual representations in requirements comprehension. An Empirical Study on the Efficiency of Graphical Vs. Textual Representations in Requirements Comprehension. https://doi.org/10.1109/icpc.2013.6613831;2013;conference;Taupe (AOI mapping, convex hull sizes), Gaze Tracker (data);/;/;"""We use Taupe [21] to analyse the
collected data. Taupe provides the results about fixations and
time for each AOI as well as AFDs and convex hull sizes in
CSV files that we export to R [22] to perform statistic analyses""";FaceLAB;"27"" screen, 70 cm distance, 1920*1080 pixel";program comprehension;28;2 BSc, 11 MSc, 15 PhD;;TROPOS diagrams;/;no;upon request;;
S78;Capturing software traceability links from developers' eye gazes;https://doi.org/10.1145/2597008.2597795;Walters, B., Shaffer, T., Sharif, B., & Kagdi, H. (2014). Capturing software traceability links from developers’ eye gazes. Capturing Software Traceability Links From Developers’ Eye Gazes. https://doi.org/10.1145/2597008.2597795;2014;conference;iTrace (data), GazeReader with SimpleGraph Gaze-Link algorithm (task-to-source entity links), will be integrated into iTrace in future work;/;/;"""iTrace only collects eye gaze data when
the Eclipse window is in focus. We asked subjects not to resize
the Eclipse window to maintain the same full screen setup for all
subjects."" ""Eye-tracking systems are particularly difficult when it comes to
scrolling files larger than what fits on the screen. For example,
Ali et al. [1] state that they use short segments of source code for
their study to have better control over the eye-tracking system. Our
environment does not have this limitation. iTrace supports scrolling
both horizontally and vertically while maintaining the context of
what the developer is actually looking at. iTrace correctly records
the SCE that the developer is looking at as long as code folding is
left off. To the best of our knowledge, iTrace is the first eye tracking
environment that is able to achieve this accuracy with scrolling.
""";Tobii X60;"24"" screen,";traceability;8;faculty and students;5;code snippet;Java;yes;http://www.csis.ysu.edu/~bsharif/itrace-pilot (not working anymore);scrolling;collection of data only in IDE window
S79;An empirical study on the efficiency of different design pattern representations in UML class diagrams;https://doi.org/10.1007/s10664-009-9125-9;Porras, G. C., & Guéhéneuc, Y. (2010). An empirical study on the efficiency of different design pattern representations in UML class diagrams. Empirical Software Engineering, 15(5), 493–522. https://doi.org/10.1007/s10664-009-9125-9;2010;journal;not named (fixations, saccades);/;/;/;EyeLink II;"17"" screen";program comprehension;24;students;3;UML class diagram;/;no;exists, link not found;;
S80;The impact of identifier style on effort and comprehension;https://doi.org/10.1007/s10664-012-9201-4;Binkley, D., Davis, M. H., Lawrie, D., Maletic, J. I., Morrell, C. H., & Sharif, B. (2012). The impact of identifier style on effort and comprehension. Empirical Software Engineering, 18(2), 219–276. https://doi.org/10.1007/s10664-012-9201-4;2012;journal;not named (fixations, saccades);/;/;/;Tobii 1750;"17"" screen, 1024*768 pixel, 11 font size";program comprehension;169;students;9;code snippet;C++, natural language;no;no;;
S81;An eye-tracking methodology for characterizing program comprehension processes;https://doi.org/10.1145/1117309.1117356;Bednarik, R., & Tukiainen, M. (2006). An eye-tracking methodology for characterizing program comprehension processes. An Eye-tracking Methodology for Characterizing Program Comprehension Processes. https://doi.org/10.1145/1117309.1117356;2006;conference;not named (fixations, saccades);/;/;/;Tobii 1750;"17"" screen, 1024*768 pixel";program comprehension;16;students;3;code snippet;Java;no;no;;
S82;Analyzing individual performance of source code review using reviewers' eye movement;https://doi.org/10.1145/1117309.1117357;Uwano, H., Nakamura, M., Monden, A., & Matsumoto, K. (2006). Analyzing individual performance of source code review using reviewers’ eye movement. Analyzing Individual Performance of Source Code Review Using Reviewers’ Eye Movement. https://doi.org/10.1145/1117309.1117357;2006;conference;application bundled with EMR-NC (fixations);;Crescent (mapping to line number and duration on line number);"""The bundled application also can
compute fixations, particular coordinates at which the eye mark
stays for a given moment. The fixations can be useful to identify
the reviewer's gaze (Requirement R2). Note however that the raw
sampled data is not sufficient to satisfy Requirements 1 to 4, since
it just represents a set of absolute coordinates of the eye movements. We need to refine the raw data into the one feasible to the individual analysis of code review. To complete the requirements, we have developed a software
application Crescent (Code Review Evaluation System by Capturing Eye movemeNT) on top of the hardware components.""";Eye Mark Tracker (EMR-NC);"21"" screen, 1024*768 pixel";debugging;5;graduates;6;code snippet;C;yes;no;;not enough features
S83;Visual attention patterns during program debugging with an IDE;https://doi.org/10.1145/2168556.2168592;Hejmady, P., & Narayanan, N. H. (2012). Visual attention patterns during program debugging with an IDE. Visual Attention Patterns During Program Debugging With an IDE. https://doi.org/10.1145/2168556.2168592;2012;conference;Tobii Studio 2.1 (data);/;"utility program (""Based
on the desired attributes (such as gaze duration and AOI
dimensions), this program generated character strings
representing attention switches among Code, Static
Visualization, Dynamic Visualization and Output. "")";/;Tobii T60 XL;/;debugging;19;graduates and undergraduates;1;code snippet;Java;no;no;;
S84;An eye-tracking study on the role of scan time in finding source code defects;https://doi.org/10.1145/2168556.2168642;Sharif, B., Falcone, M., & Maletic, J. I. (2012). An eye-tracking study on the role of scan time in finding source code defects. An Eye-tracking Study on the Role of Scan Time in Finding Source Code Defects. https://doi.org/10.1145/2168556.2168642;2012;conference;not named (fixations, saccades);/;"eye gaze analyzer written in C++ (eye
movement pattern)";/;Tobii 1750;"17"" screen, 1024*768 pixel";debugging;15;7 undergraduates, 6 graduates, 2 faculty members;4;code snippet;C;no;no;;
S85;What influences dwell time during source code reading?;https://doi.org/10.1145/2578153.2578211;Busjahn, T., Bednarik, R., & Schulte, C. (2014). What influences dwell time during source code reading? What Influences Dwell Time During Source Code Reading?: Analysis of Element Type and Frequency as Factors. https://doi.org/10.1145/2578153.2578211;2014;conference;not named (fixations, saccades, dwell/gaze time);/;/;/;Tobii T120;/;program comprehension;15;professionals;11;code snippet;Java;no;no;;
S86;An eye-tracking study assessing the comprehension of c++ and Python source code;https://doi.org/10.1145/2578153.2578218;Turner, R., Falcone, M., Sharif, B., & Lazar, A. (2014). An eye-tracking study assessing the comprehension of c++ and Python source code. An Eye-tracking Study Assessing the Comprehension of C++ and Python Source Code. https://doi.org/10.1145/2578153.2578218;2014;conference;/;/;"EyeAnalyzer (""The collected data consisted of a single screen capture video and
a sequence of raw eye fixations in XML format for each subject.
Some records had to be discarded due to technical and data integrity issues. Video and fixations were recorded continuously
over all stimuli, so we defined task boundaries and AOIs a posteri using a tool built in Visual Basic .NET. This tool allowed us
to define task boundaries as well as measure fixation counts and
total fixation duration within each AOI. """;/;/;65 cm distance;program comprehension;38;undergraduates, graduates;10;code snippet;Python, C++;no;http://www.csis.ysu.edu/~bsharif/etra14 (not working anymore);;
S87;How do we read algorithms? A case study;https://doi.org/10.1109/2.48797;Crosby, M. E., & Stelovsky, J. (1990). How do we read algorithms? A case study. IEEE Computer, 23(1), 25–35. https://doi.org/10.1109/2.48797;1990;journal;not named (fixations);/;"""Materials and analysis software were developed on Macintosh computers. This software for postexperimental analysis was designed to provide a highly visual, dynamic picture of the subjects’ eye movements. Eye fixations are superimposed on a gray, scaled-down picture of the slide. Each fixation point is displayed in time proportional to its real duration. A fixation can be visualized in a variety of modes: as a corner of a path where lines connect subsequent fixation points; as a circle whose radius is proportional to the pupil size; or by highlighting the enclosing area. Another feature of our analysis software allows the experimenter to partition
the slide into areas that can be used for a more global analysis. Figure 4 shows how the text slide was subdivided into areas of varying complexity. Then, the total number of fixations (or total time) can be
shown in each area""";"""Materials and analysis software were
developed on Macintosh computers. This
software for postexperimental analysis
was designed to provide a highly visual,
dynamic picture of the subjects’ eye
movements""";Applied Science Laboratories eye movement monitor;/;program comprehension;19;10 undergraduates, 8 graduates, 1 PhD;12;code snippet;Pascal;no;no;highly visual, dynamic picture of eye movements, for macintosh;
S88;Using psycho-physiological measures to assess task difficulty in software development;https://doi.org/10.1145/2568225.2568266;Fritz, T., Begel, A., Müller, S., Yigit-Elliott, S., & Züger, M. (2014). Using psycho-physiological measures to assess task difficulty in software development. Using Psycho-physiological Measures to Assess Task Difficulty in Software Development. https://doi.org/10.1145/2568225.2568266;2014;conference;"Tobii Studio (I-VT fixation filter) (fixation and saccade count
and duration and pupil diameter)";/;/;/;Tobii TX300;"tool records/analyzes from subjects dominant eye, 1920*1080 pixel, 23"" screen, 50-75 cm distance";program comprehension;15;professionals;8;code snippet;C#;no;http://research.microsoft.com/apps/pubs/?id=209878;;
S89;Improving automated source code summarization via an eye-tracking study of programmers;https://doi.org/10.1145/2568225.2568247;Rodeghero, P., McMillan, C., McBurney, P. W., Bosch, N., & D’Mello, S. K. (2014). Improving automated source code summarization via an eye-tracking study of programmers. Improving Automated Source Code Summarization via an Eye-tracking Study of Programmers. https://doi.org/10.1145/2568225.2568247;2014;conference;"not named (gaze time, fixations,
and regressions)";/;/;/;Tobii TX300;1920*1080 pixel;program comprehension;10;professionals;67;code snippet;Java;no;http://www3.nd.edu/~prodeghe/projects/eyesum/;;
S90;Expertise-dependent visual attention strategies develop over time during debugging with multiple code representations;https://doi.org/10.1016/j.ijhcs.2011.09.003;Bednarik, R. (2012). Expertise-dependent visual attention strategies develop over time during debugging with multiple code representations. International Journal of Human-computer Studies, 70(2), 143–155. https://doi.org/10.1016/j.ijhcs.2011.09.003;2012;journal;not named (fixations);"total fixation time, proportional fixation time, number of switches
per minute";/;/;Tobii 1750;/;debugging;18;6 novices, 8 experts;3;code snippet;Java;no;no;;
S91;How Does Software Visualization Contribute to Software Comprehension? A Grounded Theory Approach;https://doi.org/10.1080/10447318.2013.773876;Duru, H. A., Cakir, M., & İşler, V. (2013). How does software visualization contribute to software comprehension? a grounded theory approach. International Journal of Human-computer Interaction, 29(11), 743–763. https://doi.org/10.1080/10447318.2013.773876;2013;journal;Tobii Studio (fixations);/;/;/;Tobii T1750;/;program comprehension;13;professionals;7;code snippet;.NET;yes;no;;
S92;Another person's eye gaze as a cue in solving programming problems;https://doi.org/10.1145/1027933.1027936;Stein, R., & Brennan, S. E. (2004). Another person’s eye gaze as a cue in solving programming problems. Another Person’s Eye Gaze as a Cue in Solving Programming Problems. https://doi.org/10.1145/1027933.1027936;2004;conference;/;/;/;/;ISCAN RK-726PCI;;collaborative;10;professionals;3;code snippet;Java;no;no;;
S93;Performing and analyzing non-formal inspections of entity relationship diagram (ERD);https://doi.org/10.1016/j.jss.2013.03.106;Cagiltay, N. E., Tokdemir, G., Kilic, O., & Topalli, D. (2013). Performing and analyzing non-formal inspections of entity relationship diagram (ERD). Journal of Systems and Software, 86(8), 2184–2195. https://doi.org/10.1016/j.jss.2013.03.106;2013;journal;not named (fixations, durations);/;/;/;Tobii (not named, probably 1750);"17"" screen, 1024*768 pixel";program comprehension;4;professionals;;entity-relationship diagram;/;no;no;;
S94;An empirical study assessing the effect of seeit 3D on comprehension;https://doi.org/10.1109/VISSOFT.2013.6650519;Sharif, B., Jetty, G., Aponte, J., & Parra, E. (2013). An empirical study assessing the effect of seeit 3D on comprehension. An Empirical Study Assessing the Effect of Seeit 3D on Comprehension. https://doi.org/10.1109/vissoft.2013.6650519;2013;conference;not named (fixations, durations);heatmaps;/;/;Tobii X60;"1920*1080 pixel, 24"" screen";debugging;97;students;6;code snippet;Java;no;http://www.csis.ysu.edu/seresl/seeit3d-study/;;
S95;The Roles Beacons Play in Comprehension for Novice and Expert Programmers;https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=8d7013c1fb7fdb5b3ed638022a9d0048dd01e8fd;Crosby, M.E., Scholtz, J., & Wiedenbeck, S. (2002). The Roles Beacons Play in Comprehension for Novice and Expert Programmers. Annual Workshop of the Psychology of Programming Interest Group.;2002;workshop;not named (fixations and fixation times);/;/;/;ASL;/;program comprehension;19;students;1;code snippet;Pascal;no;no;;
S96;An empirical study on requirements traceability using eye-tracking;https://doi.org/10.1109/ICSM.2012.6405271;Ali, N., Sharafl, Z., Guéhéneuc, Y., & Antoniol, G. (2012). An empirical study on requirements traceability using eye-tracking. 2012 28th IEEE International Conference on Software Maintenance (ICSM). https://doi.org/10.1109/icsm.2012.6405271;2012;conference;not named (fixations);total fixation time;/;/;FaceLAB;"27"" screen, 1920*1080 pixel, 70 cm distance";traceability;26;students;6;code snippet;Java;no;http://www.ptidej.net/download/experiments/icsm12a/ (not working anymore);;
S97;Code Scanning Patterns in Program Comprehension;https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=1153854b79709f4d552959eebf9f7b2c0431f63a;Aschwanden, C. and Crosby, M. (2006). Code scanning patterns in program comprehension. In Proceedings of the 39th Hawaii International Conference on System Sciences, HICSS ’06.;2006;conference;"EventStream Framework (fixations, longest fixation average, fixation
duration)";/;/;/;ASL;;program comprehension;15;students;6;code snippet;Java;no;no;;
